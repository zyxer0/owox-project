server {
    listen       80 default;
    server_name  phpschool.owox;

    root /app/web;
    index index.html index.php;

    autoindex on;

    # Ограничиваем кол-во обрабатываем запросов с учетом настройки указанной зоны
    # burst указывает возможные всплески до 5 запросов

    # Если скорость поступления запросов превышает описанную в зоне,
    # то их обработка задерживается так, чтобы запросы обрабатывались с заданной скоростью.
    # Избыточные запросы задерживаются до тех пор, пока их число не превысит максимальный размер всплеска

    # Если же избыточные запросы в пределах лимита всплесков задерживать не требуется,
    # то следует использовать параметр nodelay:
    limit_req zone=one burst=5;

    # Настройка кеширования
    #fastcgi_cache main;
    fastcgi_no_cache = on;

    # Указываем ключ кеширвоания
    # например, "GET|http|phpschool.io:8080|/"
    # важно учесть, что в данном ключе get-параметры игнорируются
    fastcgi_cache_key "$request_method|$scheme|$host|$uri";
    fastcgi_cache_use_stale updating error timeout invalid_header http_500 http_503;

    # ответы с кодом 200 кеширвоать на 30 секунд
    fastcgi_cache_valid 200 30s;
    # ответы с кодом 404 кеширвоать на 30 секунд
    fastcgi_cache_valid 404 1m;

    # позволяет игнорировать данные в кеше в случаи
    # наличия куки nocache или get-параметра nocache
#    fastcgi_cache_bypass $cookie_nocache $arg_nocache;

    # передаём нужные fastcgi-параметры
    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
    #fastcgi_param SCRIPT_FILENAME /app/web/cgi-bin/index.php;
    include fastcgi_params;



#    location ~* ^.*\.css$ {
#
#        root /app/web/static/css;
#        rewrite "^(.*)/[\da-z]{5}/(.*)" $1/$2;
#
#        expires 24h;
#        add_header  Cache-Control "max-age=259200";
#    }
#
#    location ~* ^.*\.js$ {
#
#        root /app/web/static/js;
#        rewrite "^(.*)/[\da-z]{5}/(.*)" $1/$2;
#
#        expires 24h;
#        add_header  Cache-Control "max-age=259200";
#    }

    location ~ index\.php$ {
        proxy_cache off;
        fastcgi_cache off;
        fastcgi_pass backends;
    }

    location ~ \.php$ {
        proxy_cache off;
        fastcgi_cache off;
        fastcgi_pass backends;
    }

    # основной локейшен, который обрабатывает все запросы,
    # которые не попали в предыдущие локейшены
    location ~ / {
        # сначала проверяем наличие файла в ФС
        # иначе отправляем обработку на php
        # с помощью указания именного локейшена
        try_files $uri $uri/ @php;
    }

    location @php {
        # указываем куда проксировать запрос
        # в нашем случае это имя описанного апстрима из двух бэкендов
        fastcgi_pass backends;
    }

    access_log /app/logs/nginx/access.log main;
}

# описываем наш апстрим с двумя серверами
upstream backends {

    # по умолчанию работает балансировка round-robin
    # weight у второго сервера выставлен вдвое больше первого,
    # соответственно он будет получать больше запросов
    # max_fails, fail_timeout задают для второго сервера правило,
    # что в случае 3 ошибок в течении 30 секунд считать сервер недоступным на 30 секунд
    # параметры down, backup позволяют плавно подключать/отключать сервера
    server backend1:9000;
    # server backend2:9000 weight=4 max_fails=3 fail_timeout=30s;
}

#server {
#	listen  *:80;
#
#	server_name i2.phpschool.io i1.phpschool.io
#
#    # обычно нет необходимости в логировании запросов к изображениям
#    # это также позволяет снять лищнюю нагрузку на файловую систему
#	access_log off;
#
#	# кешируем на стороне браузера на 1 день
#	expires 1d;
#
#    # регулярное выражение соответствует запросам к изображениям,
#    # которые надо ресайзить, проверить можно по ссылке http://i1.phpschool.io:8080/150x150/php.png
#    location ~ ^(.*)/(\d+)x(\d+)/(.+\.(?:jpg|gif|png))$ {
#        alias /app/images/$1$4;
#        image_filter resize $2 $3;
#        image_filter_buffer 16M;
#    }
#
#    location ~ / {
#        root /app/images/;
#    }
#
#}